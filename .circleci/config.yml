version: 2.1

jobs:
  build:
    docker:
      - image: mcr.microsoft.com/dotnet/sdk:5.0
    steps:
      - checkout
      - run:
          working_directory: ~/project
          name: Run build
          command: |
            dotnet build
  deployment:
    docker:
      - image: cimg/base:2021.04
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - $SSH_FINGERPRINT
      - run:
          working_directory: ~/project
          name: Install .NET SDK
          command: |
            wget https://packages.microsoft.com/config/ubuntu/18.04/packages-microsoft-prod.deb -O packages-microsoft-prod.deb
            sudo dpkg -i packages-microsoft-prod.deb
            rm packages-microsoft-prod.deb
            sudo apt-get update
            sudo apt-get install -y apt-transport-https
            sudo apt-get update
            sudo apt-get install -y dotnet-sdk-5.0
            dotnet tool install --global dotnet-ef
      - run:
          working_directory: ~/project
          name: Build .Net Application for release
          command: |
            dotnet publish -c Release -o dist
            echo "Publish Successfully"
      - run:
          working_directory: ~/project
          name: Generate SQL script for database migration
          command: |
            cd src/Scool.EntityFrameworkCore.DbMigrations
            ~/.dotnet/tools/dotnet-ef migrations script -o ../../dist/migrations_script.sql
            echo "Generate SQL script for database migration Successfully"
      # Get ENV Variables from CircleCI and fill them into configuration files
      # Then copy them to distribution directory
      - run:
          working_directory: ~/project
          name: Fill Enviroment Variables in configuration files
          command: |

            #Fill 2scool-api.service
            sed -i "s%<USER_NAME>%$DROPLET_USER%g" 2scool-api.service

            #Fill 2scool-api.nginx
            sed -i "s%<HOST_IP>%$DROPLET_IP%g" 2scool-api.nginx
            
            #Fill migrate-db.sh
            sed -i "s%<DB_USER>%$DB_USER%g" migrate-db.sh
            sed -i "s%<DB_PASSWORD>%$DB_PASSWORD%g" migrate-db.sh
            sed -i "s%<DB_DATABASE_NAME>%$DB_DATABASE_NAME%g" migrate-db.sh

            #Fill appsettings.json
            sed -i "s%<AUTH_URL>%$AUTH_URL%g" src/Scool.HttpApi.Host/appsettings.json
            sed -i "s%<CLIENT_URL>%$CLIENT_URL%g" src/Scool.HttpApi.Host/appsettings.json
            sed -i "s%<CORS_ORIGINS>%$CORS_ORIGINS%g" src/Scool.HttpApi.Host/appsettings.json
            sed -i "s%<REDIRECT_URLS>%$REDIRECT_URLS%g" src/Scool.HttpApi.Host/appsettings.json
            sed -i "s%<DB_CONNECTION_STRING>%$DB_CONNECTION_STRING%g" src/Scool.HttpApi.Host/appsettings.json
            cp 2scool-api.service dist/
            cp 2scool-api.nginx dist/
            \cp -fR src/Scool.HttpApi.Host/appsettings.json dist/
            echo "Fill Enviroment Variables in configuration files Successfully"
      - run:
          name: Stop .NET Application
          command: |
            /usr/bin/ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no $DROPLET_USER@$DROPLET_IP "
              
              is_service_exists() {
                local x=$1
                if systemctl status "${x}" 2> /dev/null | grep -Fq "Active:"; then
                  return 0
                else
                  return 1
                fi
              }
              if is_service_exists '2scool-api.service'; then
                systemctl stop 2scool-api.service
                systemctl disable 2scool-api.service
              fi
              unset -f is_service_exists
              cd /var/www/2scool-api
              rm -r -f dist
            "
            echo "Stop .NET Application Successfully"
      - run:
          working_directory: ~/project
          name: Copy distribution folder to hosting VPS
          command: |
            scp -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -r ~/project/dist $DROPLET_USER@$DROPLET_IP:/var/www/2scool-api/
            echo "Copy distribution folder to hosting VPS Successfully"
      # Run database migrations
      - run:
          name: Run Database migrations
          command: |
            /usr/bin/ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no $DROPLET_USER@$DROPLET_IP "
              cd /var/www/2scool-api
              ./migrate-db.sh
            "
            echo "Run Database migrations Successfully"
      - run:
          name: Start .NET Application
          command: |
            /usr/bin/ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no $DROPLET_USER@$DROPLET_IP "
              cd /var/www/2scool-api/dist
              cp 2scool-api.service /etc/systemd/system/2scool-api.service
              cp 2scool-api.nginx /etc/nginx/sites-available/2scool-api
              ln -sf /etc/nginx/sites-available/2scool-api /etc/nginx/sites-enabled/
              nginx -t
              systemctl enable 2scool-api.service
              systemctl start 2scool-api.service
              systemctl restart nginx
            "
            echo "Start .NET Application Successfully"
workflows:
  version: 2
  check_build:
    jobs:
      - build:
          filters:
            branches:
              only: dev
  deploy:
    when:
      equal: [ master, << pipeline.git.branch >> ]
    jobs:
      - build
      - deployment:
          requires:
            - build